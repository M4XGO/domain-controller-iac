name: 'Auto Documentation Generator'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - '**/*.py'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.go'
      - '**/*.java'
      - '**/*.tf'
      - '**/*.yaml'
      - '**/*.yml'
      - 'docs/**'
  pull_request:
    branches:
      - main
    paths:
      - '**/*.py'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.go'
      - '**/*.java'
      - '**/*.tf'
      - '**/*.yaml'
      - '**/*.yml'
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate all documentation'
        required: false
        default: 'false'

env:
  CONFLUENCE_SPACE_KEY: ${{ secrets.CONFLUENCE_SPACE_KEY }}
  CONFLUENCE_BASE_URL: ${{ secrets.CONFLUENCE_BASE_URL }}
  CONFLUENCE_USERNAME: ${{ secrets.CONFLUENCE_USERNAME }}
  CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  analyze-and-document:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r scripts/requirements.txt
          npm install -g @modelcontextprotocol/cli

      - name: Generate documentation
        run: python scripts/generate_docs.py

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: generated-documentation
          path: generated_docs.md
          retention-days: 30

      - name: Comment on PR with documentation preview
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const docs = fs.readFileSync('generated_docs.md', 'utf8');
              const preview = docs.length > 2000 ? docs.substring(0, 2000) + '\n\n...(documentation truncated)' : docs;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 📚 Auto-Generated Documentation Preview\n\n${preview}\n\n---\n*Full documentation has been generated and will be published to Confluence when this PR is merged.*`
              });
            } catch (error) {
              console.log('No documentation file found or error creating comment:', error);
            }

      - name: Create documentation summary
        run: |
          echo "## Documentation Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Code analysis completed using LLM" >> $GITHUB_STEP_SUMMARY
          echo "📝 Documentation generated and saved as artifact" >> $GITHUB_STEP_SUMMARY
          if [ -n "$CONFLUENCE_BASE_URL" ]; then
            echo "🚀 Documentation published to Confluence" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ Confluence not configured - documentation saved locally only" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration Required" >> $GITHUB_STEP_SUMMARY
          echo "To enable Confluence publication, add these secrets to your repository:" >> $GITHUB_STEP_SUMMARY
          echo "- \`CONFLUENCE_BASE_URL\`: Your Confluence instance URL" >> $GITHUB_STEP_SUMMARY
          echo "- \`CONFLUENCE_USERNAME\`: Your Confluence username" >> $GITHUB_STEP_SUMMARY
          echo "- \`CONFLUENCE_API_TOKEN\`: Your Confluence API token" >> $GITHUB_STEP_SUMMARY
          echo "- \`CONFLUENCE_SPACE_KEY\`: Target Confluence space key" >> $GITHUB_STEP_SUMMARY

